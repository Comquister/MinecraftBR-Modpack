name: Generate Modrinth Pack
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Generate mrpack
      run: |
        mkdir -p build/overrides
        [ -d .minecraft ] && cp -r .minecraft/* build/overrides/ 2>/dev/null || true
        [ -d config ] && cp -r config build/overrides/
        [ -d resourcepacks ] && cp -r resourcepacks build/overrides/
        [ -d shaderpacks ] && cp -r shaderpacks build/overrides/
        [ -d scripts ] && cp -r scripts build/overrides/
        
        FILES_JSON="[]"
        MC_VERSION="1.20.1"
        LOADER_VERSION="0.14.21"
        
        if [ -f mmc-pack.json ]; then
          MC_VERSION=$(jq -r '.components[] | select(.uid=="net.minecraft") | .version // "1.20.1"' mmc-pack.json)
          LOADER_VERSION=$(jq -r '.components[] | select(.uid=="net.fabricmc.fabric-loader") | .version // "0.14.21"' mmc-pack.json)
        fi
        
        jq -n --arg sha "${{ github.sha }}" --arg name "${{ github.event.repository.name }}" --arg mc "$MC_VERSION" --arg loader "$LOADER_VERSION" '{"formatVersion": 1, "game": "minecraft", "versionId": $sha, "name": $name, "summary": "Generated from PrismLauncher instance", "files": [], "dependencies": {"minecraft": $mc, "fabric-loader": $loader}}' > build/modrinth.index.json
        
        cd build && zip -r "../${{ github.event.repository.name }}-${{ github.sha }}.mrpack" .
    
    - name: Upload mrpack
      uses: actions/upload-artifact@v4
      with:
        name: modrinth-pack
        path: "*.mrpack"
    
    - name: Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        files: "*.mrpack"
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}